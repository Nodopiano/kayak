#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    MINGW64_NT-10.0*)   MACHINE=mingw64;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported system type"
    echo "System must be a Macintosh, Linux or Windows"
    echo ""
    echo "System detection determined via uname command"
    echo "If the following is empty, could not find uname command: $(which uname)"
    echo "Your reported uname is: $(uname -s)"
fi

# Set environment variables for dev
if [ "$MACHINE" == "linux" ]; then
    if grep -q Microsoft /proc/version; then # WSL
        export XDEBUG_HOST=10.0.75.1
    else
        export XDEBUG_HOST=$(/sbin/ifconfig docker0 | grep "inet addr" | cut -d ':' -f 2 | cut -d ' ' -f 1)
    fi
    SEDCMD="sed -i"
elif [ "$MACHINE" == "mac" ]; then
    export XDEBUG_HOST=$(ipconfig getifaddr en0) # Ethernet

    if [ -z "$XDEBUG_HOST" ]; then
        export XDEBUG_HOST=$(ipconfig getifaddr en1) # Wifi
    fi
    SEDCMD="sed -i .bak"
elif [ "$MACHINE" == "mingw64" ]; then # Git Bash
    export XDEBUG_HOST=10.0.75.1
    SEDCMD="sed -i"
fi

export MYSQL_PORT=${MYSQL_PORT:-3306}

# Is the environment running
PSRESULT="$(docker-compose ps -q)"
if [ ! -z "$PSRESULT" ]; then
    EXEC="yes"
else
    EXEC="no"
fi

# Create base docker-compose command to run
COMPOSE="docker-compose -f docker-compose.yml"

# If we pass any arguments...
if [ $# -gt 0 ]; then

    # Source .env, which can over-ride env vars
    # such as APP_PORT, MYSQL_PORT, and WWWUSER
    if [ -f .env ]; then
        source .env
    fi

    # Start up containers
    if [ "$1" == "start" ]; then
        $COMPOSE up -d

        # Stop the containers
    elif [ "$1" == "stop" ]; then
        $COMPOSE down

    elif [ "$1" == "init" ]; then
        echo "KAYAK: Initializing ..."
        if [ ! -f .env ]; then
            echo "No .env file found within current working directory $(pwd)"
            echo "Creating an empty .env file..."
            cp .env-example .env
        else
            echo ".env file already present, go ahead and install"
        fi
        

    elif [ "$1" == "install" ]; then
        echo "KAYAK: Initializing ..."
        if [ ! -f .env ]; then
            echo "No .env file found within current working directory $(pwd)"
            echo "Creating an empty .env file..."
            cp .env-example .env
            echo "please set your variables before install"
            exit 0
        fi

        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec np-wp install_wp
        else
            $COMPOSE up -d
            sleep 5
            $COMPOSE exec np-wp install_wp
        fi



        elif [ "$1" == "dump" ]; then
            shift 1
            if [ "$EXEC" == "yes" ]; then
                $COMPOSE exec \
                    np-wpdb \
                    mysqldump -u $WORDPRESS_DB_USER -p$WORDPRESS_DB_PASSWORD $WORDPRESS_DB_NAME
            else
                $COMPOSE run --rm \
                    np-wpdb \
                    mysqldump -u $WORDPRESS_DB_USER -p$WORDPRESS_DB_PASSWORD $WORDPRESS_DB_NAME
            fi

            # Else, pass-thru args to docker-compose
        else
            $COMPOSE "$@"
        fi
    else
        # Use the docker-compose ps command if nothing else passed through
        $COMPOSE ps
    fi
